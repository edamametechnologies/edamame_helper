name: Release Helper for macOS on GitHub / AWS

on:
  workflow_dispatch:

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Write permissions are required to upload the release asset.
permissions: write-all

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 90

    env:
      EDAMAME_HELPER_SENTRY: ${{ secrets.EDAMAME_HELPER_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_SERVER: ${{ secrets.EDAMAME_SERVER }}
      EDAMAME_SERVER_PEM: ${{ secrets.EDAMAME_SERVER_PEM }}
      EDAMAME_SERVER_KEY: ${{ secrets.EDAMAME_SERVER_KEY }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      EDAMAME_CLIENT_CA_PEM: ${{ secrets.EDAMAME_CLIENT_CA_PEM }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:

      - name: Clean workspace
        shell: bash
        run: rm -rf ${{ github.workspace }}/*

      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          auto_remediate: true
          network_scan: true
          checkout: true

      - name: Install additional packages w/ Homebrew
        run: |
          brew install protobuf
          brew install wget

      - name: Setup signing
        shell: bash
        run: |
          # Create certificate files from secrets base64
          echo ${{ secrets.APPLE_DEVELOPMENT_CER }} | base64 --decode > certificate_dev.cer
          echo ${{ secrets.APPLE_DEVELOPMENT_KEY }} | base64 --decode > certificate_dev.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CER }} | base64 --decode > certificate_installer.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_KEY }} | base64 --decode > certificate_installer.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CER }} | base64 --decode > certificate_application.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_KEY }} | base64 --decode > certificate_application.key
          
          # Create p12 file
          openssl pkcs12 -export -name zup -in certificate_dev.cer -inkey certificate_dev.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_dev.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_installer.cer -inkey certificate_installer.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_installer.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_application.cer -inkey certificate_application.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_application.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          
          # Configure Keychain
          KEYCHAIN_PATH=/tmp/app-signing.keychain-db
          security create-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          # Import certificates on Keychain
          security import certificate_dev.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_installer.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Verify Keychain
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Store notarization credentials
          echo ${{ secrets.APPLE_APPSTORE_CONNECT_API_KEY }} | base64 --decode > appstore_connect_api_key.p8
          xcrun notarytool store-credentials -k appstore_connect_api_key.p8 -d ${{ secrets.APPLE_APPSTORE_CONNECT_API_KEY_ID }} -i ${{ secrets.APPLE_APPSTORE_CONNECT_API_ISSUER_ID }} Edamame

      - name: Build helper and its standalone installer
        shell: bash
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          mkdir -p target/release
          lipo -create -output target/release/edamame_helper \
            target/x86_64-apple-darwin/release/edamame_helper \
            target/aarch64-apple-darwin/release/edamame_helper

      - name: Packaging and signing of the Helper
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          ./macos/make-pkg.sh && ./macos/make-distribution-pkg.sh
          # Final naming with version
          cp ./target/pkg/edamame-helper.pkg ./target/pkg/edamame-helper-macos-${VERSION}.pkg

      - name: Notarization
        shell: bash
        run: |          
          ./macos/notarization.sh ./target/pkg/edamame-helper.pkg
          
      # Main only (upload to base folder)
      - name: Upload helper to AWS
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          aws s3 cp ./target/pkg/edamame-helper-macos-${VERSION}.pkg s3://edamame-helper/macos/edamame-helper-macos-${VERSION}.pkg --acl public-read

      # Main only
      # Check if release exists
      - name: Check for existing release
        if: github.ref == 'refs/heads/main'
        id: get_release
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          echo "::set-output name=version::$VERSION"
          VERSION_TAG=v${VERSION}
          echo "::set-output name=tag::$VERSION_TAG"
          if [[ -n "$(gh release view $VERSION_TAG --repo ${{ github.repository }} --json id -q .id)" ]]; then
            echo "::set-output name=exists::true"
            echo "::set-output name=upload_url::$(gh release view $VERSION_TAG --json uploadUrl -q .uploadUrl )"
          else
            echo "::set-output name=exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update the tag if it exists and points to a different commit
      - name: Update the tag if it exists and points to a different commit
        if: github.ref == 'refs/heads/main' && steps.get_release.outputs.exists == 'true'
        run: |
          gh release edit ${{ steps.get_release.outputs.tag }} --repo ${{ github.repository }} --target ${{ github.sha }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Main only
      - name: Create release if it doesn't exist
        if: github.ref == 'refs/heads/main' && steps.get_release.outputs.exists != 'true'
        # This populates steps.get_release.outputs.upload_url with the upload_url of the release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_release.outputs.tag }}
          release_name: Release ${{ steps.get_release.outputs.tag }}
          draft: false
          prerelease: false

      # Main only
      - name: Upload asset to release
        if: github.ref == 'refs/heads/main'
        # Supports overwrite
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.exists == 'true' && steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ./target/pkg/edamame-helper-macos-${{ steps.get_release.outputs.version }}.pkg
          asset_name: edamame-helper-macos-${{ steps.get_release.outputs.version }}.pkg
          asset_content_type: application/octet-stream
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump EDAMAME Posture sessions
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          dump_sessions_log: true