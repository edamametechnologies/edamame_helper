name: Publish Helper for macOS

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'
      - 'main'
    paths-ignore:
      - 'windows/**'
      - 'linux/**'
      - 'snap/**'
      - .github/workflows/release_deploy_windows.yml
      - .github/workflows/release_deploy_linux.yml

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Write permissions are required to upload the release asset.
permissions: write-all

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install additional packages w/ Homebrew
        run: |
          brew install protobuf
          brew install wget

      - name: Setup for edamame_foundation
        shell: bash
        run: |
          cd ..
          git clone https://github.com/edamametechnologies/edamame_foundation.git
          cd ./edamame_foundation
          cat ./Cargo.toml | sed 's/\"cdylib\"/\"staticlib\"/g' > ./Cargo.toml.static 
          cp ./Cargo.toml.static ./Cargo.toml
          ./update-threats.sh macOS

      - name: Setup for edamame_helper
        shell: bash
        run: |
          cat ./Cargo.toml | sed 's/\"cdylib\"/\"staticlib\"/g' > ./Cargo.toml.static
          cp ./Cargo.toml.static ./Cargo.toml

      - name: Setup signing
        shell: bash
        run: |
          # Create certificate files from secrets base64
          echo ${{ secrets.APPLE_MAC_DEVELOPEMENT_CER }} | base64 --decode > certificate_dev.cer
          echo ${{ secrets.APPLE_MAC_DEVELOPEMENT_KEY }} | base64 --decode > certificate_dev.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CER }} | base64 --decode > certificate_installer.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_KEY }} | base64 --decode > certificate_installer.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CER }} | base64 --decode > certificate_application.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_KEY }} | base64 --decode > certificate_application.key
          
          # Create p12 file
          openssl pkcs12 -export -name zup -in certificate_dev.cer -inkey certificate_dev.key -passin pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }} -out certificate_dev.p12 -passout pass:${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_installer.cer -inkey certificate_installer.key -passin pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }} -out certificate_installer.p12 -passout pass:${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_application.cer -inkey certificate_application.key -passin pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }} -out certificate_application.p12 -passout pass:${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}
          
          # Configure Keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          # Import certificates on Keychain
          security import certificate_dev.p12 -P "${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_installer.p12 -P "${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Verify Keychain
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Store notarization credentials
          echo ${{ secrets.APPLE_APPSTORE_CONNECT_API_KEY }} | base64 --decode > appstore_connect_api_key.p8
          xcrun notarytool store-credentials -k appstore_connect_api_key.p8 -d ${{ secrets.APPLE_APPSTORE_CONNECT_API_KEY_ID }} -i ${{ secrets.APPLE_APPSTORE_CONNECT_API_ISSUER_ID }} Edamame

      - name: Build helper and its standalone installer
        shell: bash
        run: |
          export EDAMAME_HELPER_SENTRY=${{ secrets.EDAMAME_HELPER_SENTRY }}    
          export EDAMAME_SERVER=${{ secrets.EDAMAME_SERVER }}    
          export EDAMAME_CLIENT_CA_PEM=${{ secrets.EDAMAME_CLIENT_CA_PEM }}    
          export EDAMAME_SERVER_KEY=${{ secrets.EDAMAME_SERVER_KEY }}    
          export EDAMAME_SERVER_PEM=${{ secrets.EDAMAME_SERVER_PEM }}    
          cd ./macos
          xcodebuild -project ./edamame_helper_xcode/edamame_helper_xcode.xcodeproj -scheme edamame_helper -configuration Release

      - name: Packaging and signing of the Helper
        shell: bash
        run: |
          VERSION=$(grep '^version =' ../edamame_foundation/Cargo.toml | awk '{print $3}' | tr -d '"')
          cd ./macos
          ./make-pkg.sh && ./make-distribution-pkg.sh
          # Final naming with version
          cp ./target/edamame-helper.pkg ./target/edamame-helper-${VERSION}.pkg

      - name: Notarization
        shell: bash
        run: |          
          cd ./macos
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          ./notarization.sh

      # Dev only (upload to dev folder)
      - name: Upload helper to AWS
        if: github.ref == 'refs/heads/dev'
        shell: bash
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}    
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          aws s3 cp ./macos/target/edamame-helper-${VERSION}.pkg s3://edamame-helper/dev/macos/edamame-helper-${VERSION}.pkg --acl public-read

      # Main only (upload to base folder)
      - name: Upload helper to AWS
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}  
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          aws s3 cp ./macos/target/edamame-helper-${VERSION}.pkg s3://edamame-helper/macos/edamame-helper-${VERSION}.pkg --acl public-read

      # Main only
      - name: Check for existing release
        if: github.ref == 'refs/heads/main'
        id: get_release
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          echo "::set-output name=version::$VERSION"
          VERSION_TAG=v${VERSION}
          echo "::set-output name=tag::$VERSION_TAG"
          if [[ -n "$(gh release view $VERSION_TAG --repo ${{ github.repository }} --json id -q .id)" ]]; then
            echo "::set-output name=exists::true"
            echo "::set-output name=upload_url::$(gh release view $VERSION_TAG --json uploadUrl -q .uploadUrl )"
          else
            echo "::set-output name=exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Main only
      - name: Create release if it doesn't exist
        if: github.ref == 'refs/heads/main' && steps.get_release.outputs.exists != 'true'
        # This populates steps.get_release.outputs.upload_url with the upload_url of the release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_release.outputs.tag }}
          release_name: Release ${{ steps.get_release.outputs.tag }}
          draft: false
          prerelease: false

      # Main only
      - name: Upload asset to release
        if: github.ref == 'refs/heads/main'
        # Supports overwrite
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.exists == 'true' && steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ./macos/target/edamame-helper-${{ steps.get_release.outputs.version }}.pkg
          asset_name: edamame-helper-${{ steps.get_release.outputs.version }}.pkg
          asset_content_type: application/octet-stream
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
